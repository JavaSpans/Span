<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown学习</title>
    <url>/2021/05/06/Day01MarkDowd%20%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Markdown学习"><a href="#Markdown学习" class="headerlink" title="Markdown学习"></a>Markdown学习</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><p>一级标题使用 #加空格</p>
<p>二级标题使用两个#加空格</p>
<p>三级标题使用三个#加空格</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>Hello,world!</strong>  粗体在文本前加两个#</p>
<p><em>Hello,world!</em>       斜体体在文本前加一个#</p>
<p><em><strong>Hello,world!</strong></em>    粗斜体在文本前加三个#</p>
<p><del>Hello,world!</del>    删除线在文本前加两个~~</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>三个~</p>
<p>三个*</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>“<img src="" alt="截图">”</p>
<p>插入图片使用！//感叹号[]//文件名(//图片路径)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>html 学习目录(连载中)</title>
    <url>/2021/05/14/Html%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="今天开始正式写前端笔记"><a href="#今天开始正式写前端笔记" class="headerlink" title="今天开始正式写前端笔记"></a>今天开始正式写前端笔记</h1><blockquote>
<h2 id="为什么要写前端笔记？"><a href="#为什么要写前端笔记？" class="headerlink" title="为什么要写前端笔记？"></a>为什么要写前端笔记？</h2></blockquote>
<blockquote>
<p>作为一个学习技术和分享笔记的小博客</p>
<p>本着学习和分享前端菜鸟笔记开始有目录了。<del>在这里我要立个Flag，从入门到入坟一定要坚持写完</del>。顺便巩固一下自己的基础（就是因为鄙人太菜了，哎~），生存不易,还需努力！！！</p>
</blockquote>
<h3 id="最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！"><a href="#最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！" class="headerlink" title="最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！"></a>最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！</h3><hr>
<h4 id="前端电脑笔记将会分为以下几个阶段"><a href="#前端电脑笔记将会分为以下几个阶段" class="headerlink" title="前端电脑笔记将会分为以下几个阶段"></a>前端电脑笔记将会分为以下几个阶段</h4><h1 id="（目录）"><a href="#（目录）" class="headerlink" title="（目录）"></a><strong>（目录）</strong></h1><h2 id="一、html入门"><a href="#一、html入门" class="headerlink" title="一、html入门"></a>一、html入门</h2><ul>
<li><h5 id="Java快速入门"><a href="#Java快速入门" class="headerlink" title="Java快速入门"></a>Java快速入门</h5><ol>
<li><h5 id="html简介"><a href="#html简介" class="headerlink" title="html简介"></a><a href="https://baike.baidu.com/item/HTML/97049?fr=aladdin">html简介</a></h5><h5 id=""><a href="#" class="headerlink" title=""></a></h5></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Debug的使用</title>
    <url>/2021/05/13/Debug%E5%92%8C%E6%89%93%E5%8D%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="Debug的使用-："><a href="#Debug的使用-：" class="headerlink" title="Debug的使用 ："></a>Debug的使用 ：</h3><h4 id="在IDEa或者在eclipse中"><a href="#在IDEa或者在eclipse中" class="headerlink" title="在IDEa或者在eclipse中,"></a>在IDEa或者在eclipse中,</h4><h4 id="1-先点击要检查的代码前面，出现红点或蓝点表示标记成功"><a href="#1-先点击要检查的代码前面，出现红点或蓝点表示标记成功" class="headerlink" title="1.先点击要检查的代码前面，出现红点或蓝点表示标记成功,"></a>1.先点击要检查的代码前面，出现红点或蓝点表示标记成功,</h4><h4 id="2-然后找到选项栏运行图标旁边的-”Debug“"><a href="#2-然后找到选项栏运行图标旁边的-”Debug“" class="headerlink" title="2.然后找到选项栏运行图标旁边的 ”Debug“"></a>2.然后找到选项栏运行图标旁边的 ”Debug“</h4><h4 id="3-点击之后下方窗口会出现控制栏-就可以调试或者一步一步点击下一步看代码运行状态和代码执行内容"><a href="#3-点击之后下方窗口会出现控制栏-就可以调试或者一步一步点击下一步看代码运行状态和代码执行内容" class="headerlink" title="3.点击之后下方窗口会出现控制栏,就可以调试或者一步一步点击下一步看代码运行状态和代码执行内容"></a>3.点击之后下方窗口会出现控制栏,就可以调试或者一步一步点击下一步看代码运行状态和代码执行内容</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印五行三角形  5行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">5</span>; j &gt;= i; j--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">1</span> ; j&lt;i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql</title>
    <url>/2021/05/10/Mysql/</url>
    <content><![CDATA[<h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询所有住在南昌的女学生</span><br><span class="line">SELECT * from yd_student where sex&#x3D;&#39;女&#39; and  address &#x3D; &#39;南昌&#39;;</span><br><span class="line">-- 查询所有男生的信息</span><br><span class="line">SELECT * FROM yd_student WHERE sex&#x3D;&#39;男&#39;;</span><br><span class="line">-- 查询所有女生的姓名，学号，地址</span><br><span class="line">SELECT name,sno,address FROM yd_student WHERE sex&#x3D;&#39;女&#39;;</span><br><span class="line">-- 把南昌的女的学生删除</span><br><span class="line">DELETE from yd_student where sex&#x3D;&#39;女&#39; and  address&#x3D;&#39;南昌&#39;;</span><br><span class="line"></span><br><span class="line">-- 查询yd_user 按年龄排序</span><br><span class="line">SELECT * FROM yd_user ORDER BY age DESC;  -- 降序(大到小)</span><br><span class="line">SELECT * FROM yd_user ORDER BY age ASC;   -- 升序</span><br><span class="line"></span><br><span class="line">-- 分组查询</span><br><span class="line">SELECT * from yd_user GROUP BY sex,id;-- 分组查询</span><br><span class="line">-- 分组查询所有男生女生各有多少人</span><br><span class="line">SELECT sex,COUNT(sex) FROM yd_user GROUP BY sex;</span><br><span class="line">SELECT COUNT(*) from yd_user; -- 统计查询</span><br><span class="line">-- 分组查询，并且设置分组条件</span><br><span class="line">-- 1.查询按照性别分组后数量大于2的那个性别，输出性别及数量</span><br><span class="line">SELECT sex,COUNT(sex) from yd_user GROUP BY sex;</span><br><span class="line">HAVING COUNT(sex)&gt;2;</span><br><span class="line">-- 2.查询按照性别分组后年龄大于两岁，数量大于2的那个性别，输出性别及数量</span><br><span class="line">SELECT sex,COUNT(sex) from yd_user where age&gt;2 GROUP BY sex;</span><br><span class="line">HAVING COUNT(sex)&gt;2;</span><br><span class="line"></span><br><span class="line">-- 限制查询数量 limit</span><br><span class="line">-- 1.查前面两个人数据</span><br><span class="line">SELECT * from yd_user LIMIT 2;</span><br><span class="line">SELECT * from yd_user LIMIT 0,2;</span><br><span class="line">-- 2.查询从第二开始查询两条数据  前面的数字代表从第几条开始，后面的数字代表查询几条</span><br><span class="line">SELECT * from yd_user LIMIT 2,2;</span><br><span class="line">-- 3.查询从第二开始查询两条数据中的男的</span><br><span class="line">SELECT * from yd_user where sex&#x3D;&#39;男&#39; LIMIT 2,2;</span><br><span class="line">-- 4查询从第二开始查询两条数据中的男的并按照年龄排序</span><br><span class="line">SELECT * from yd_user where sex&#x3D;&#39;男&#39; ORDER BY age DESC LIMIT 0,3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 去除重复</span><br><span class="line">SELECT address from yd_student; -- 去除来自重复的地址</span><br><span class="line">SELECT DISTINCT address from yd_student; -- 地址</span><br><span class="line">SELECT DISTINCT name from yd_student;-- 名字</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 别名</span><br><span class="line">SELECT s.sex as &#39;性别&#39;,COUNT(*) as &#39;总人数&#39; from yd_student as s GROUP BY sex;-- 查询男生女生个有多少人数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT name as &#39;姓名&#39;,sex as&#39;性别&#39;,address as &#39;地址&#39; from yd_student;</span><br><span class="line"></span><br><span class="line">#查询工资&gt;12000的员工信息</span><br><span class="line">SELECT * from employees where salary&gt;12000;</span><br><span class="line">#查询部门编号不等于90的员工名和部门编号</span><br><span class="line">SELECT first_name,department_id from </span><br><span class="line">employees where department_id !&#x3D;90;</span><br><span class="line">#查询工资在10000到20000之间的员工名、工资以及奖金</span><br><span class="line">SELECT first_name,salary,commission_pct from </span><br><span class="line">employees where salary&gt;10000 and salary&lt;20000;</span><br><span class="line"></span><br><span class="line">SELECT first_name,salary,commission_pct from </span><br><span class="line">employees where salary BETWEEN 10000 and 20000;</span><br><span class="line">#查询部门编号不是在90到100之间，或者工资高于15000的员工信息</span><br><span class="line">SELECT * from employees where </span><br><span class="line">(department_id&lt;&#x3D;90 and department_id&gt;&#x3D;100) or salary&gt;15000;</span><br><span class="line">#查询员工last_name中包含字符a的员工信息</span><br><span class="line">SELECT * from employees where last_name like &quot;%a%&quot;;</span><br><span class="line">#查询员工last_name的第二个字符为a，第五个字符为e的员工信息</span><br><span class="line">SELECT * from employees where last_name like &quot;_a__e%&quot;;</span><br><span class="line">#查询员工last_name的第二个字符为_的员工信息</span><br><span class="line">SELECT * from employees where last_name like &quot;_\_%&quot;;</span><br><span class="line">#查询工资在10000到20000之间的员工名、工资以及奖金</span><br><span class="line">SELECT first_name,salary,commission_pct from </span><br><span class="line">employees where salary&gt;10000 and salary&lt;20000;</span><br><span class="line">#查询员工的工种编号为 IT_PROG，AD_VP，AD_PRES中的一个的员工信息</span><br><span class="line">SELECT * from employees where </span><br><span class="line">job_id in(&#39;IT_PROG&#39;,&#39;AD_VP&#39;,&#39;AD_PRES&#39;);</span><br><span class="line"></span><br><span class="line">#查询没有奖金的员工信息</span><br><span class="line">select * from employees where commission_pct is null;</span><br><span class="line">#查询有奖金的员工信息</span><br><span class="line">select * from employees where commission_pct is not null; </span><br><span class="line">#查询员工号为176的员工的姓名、部门号和年薪</span><br><span class="line">select last_name,first_name,job_id from employees where employee_id &#x3D; 176;</span><br><span class="line"></span><br><span class="line">#查询年龄最大的那个人</span><br><span class="line"></span><br><span class="line">Select max(age) from yd_user ;</span><br><span class="line"></span><br><span class="line">#查询年纪最小的那个人</span><br><span class="line"></span><br><span class="line">select min(min) from yd_user;</span><br><span class="line"></span><br><span class="line">#统计所有岁数的和</span><br><span class="line">select SUM(age) from yd_user;</span><br><span class="line"></span><br><span class="line">#查询数据库yd_users age 内为 2，3，30</span><br><span class="line">SELECT * FROM yd_users WHERE age in(2,3,30);</span><br><span class="line">#查询数据库yd_users age 内不为 2，3，30</span><br><span class="line">SELECT * FROM yd_users WHERE age  NOT	in(2,3,30);</span><br><span class="line">#查询数据库yd_users age 内字符串为空</span><br><span class="line">SELECT * FROM yd_users WHERE age &#x3D; &#39; &#39;;</span><br><span class="line">#查询数据库yd_users age 内为null的值</span><br><span class="line">SELECT *FROM yd_users WHERE age is NULL;</span><br><span class="line">#查询数据库yd_users age 内为不为null的值</span><br><span class="line">SELECT * FROM yd_users WHERE age is not null;</span><br><span class="line">#查询性别不是男的人</span><br><span class="line">SELECT * FROM yd_users WHERE sex !&#x3D; &#39;男&#39;;</span><br><span class="line">SELECT * FROM yd_users WHERE sex &lt;&gt; &#39;男&#39;;</span><br><span class="line">#模糊查询</span><br><span class="line">#查询名字是包含e的人</span><br><span class="line">SELECT * FROM yd_study WHERE name LIKE &#39;%e%&#39;;</span><br><span class="line">#查询名字是J开头的人</span><br><span class="line">SELECT * FROM yd_study WHERE name like &#39;j%&#39;;</span><br><span class="line">#查询身份证号减去年龄等于360109的人</span><br><span class="line">SELECT * FROM yd_study WHERE idcard-age &#x3D; 360109;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>反编译 class 文件</title>
    <url>/2021/05/10/JAVA%20class%20%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h3 id="反编译-class-文件"><a href="#反编译-class-文件" class="headerlink" title="反编译 class 文件"></a>反编译 class 文件</h3><p>1.找到项目结构 </p>
<p>project → project compiler output</p>
<p>2.打开输出out文件夹 把要反编译的class文件拖进</p>
<p>3.在idea项目内就可以打开反编译文件了。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>方 法</title>
    <url>/2021/05/13/Java%E6%96%B9%E6%B3%95%E8%AF%A6%E6%83%85/</url>
    <content><![CDATA[<h3 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//系统的类.对象.方法</span></span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure>

<h4 id="方法是语句的集合，它们在一起执行一个功能。"><a href="#方法是语句的集合，它们在一起执行一个功能。" class="headerlink" title="方法是语句的集合，它们在一起执行一个功能。"></a>方法是语句的集合，它们在一起执行一个功能。</h4><h5 id="1-方法是解决一类问题的步骤的有序组合"><a href="#1-方法是解决一类问题的步骤的有序组合" class="headerlink" title="1.方法是解决一类问题的步骤的有序组合"></a>1.方法是解决一类问题的步骤的有序组合</h5><h5 id="2-方法包含于类或对象中"><a href="#2-方法包含于类或对象中" class="headerlink" title="2.方法包含于类或对象中"></a>2.方法包含于类或对象中</h5><h5 id="3-方法在程序中被创建，在其他地方被引用"><a href="#3-方法在程序中被创建，在其他地方被引用" class="headerlink" title="3.方法在程序中被创建，在其他地方被引用"></a>3.方法在程序中被创建，在其他地方被引用</h5><h4 id="方法的原则"><a href="#方法的原则" class="headerlink" title="方法的原则"></a>方法的原则</h4><h5 id="方法的本意是功能块，就是实现某个功能的语句块的集合，我们在设计方法的时候，最好保证方法的原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展。"><a href="#方法的本意是功能块，就是实现某个功能的语句块的集合，我们在设计方法的时候，最好保证方法的原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展。" class="headerlink" title="方法的本意是功能块，就是实现某个功能的语句块的集合，我们在设计方法的时候，最好保证方法的原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展。"></a>方法的本意是功能块，就是实现某个功能的语句块的集合，我们在设计方法的时候，最好保证方法的原子性，就是一个方法只完成一个功能，这样利于我们后期的扩展。</h5><p>方法的命名：小驼峰 或者大驼峰;</p>
<h3 id="java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法"><a href="#java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法" class="headerlink" title="java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法:"></a>java的方法类似于其他语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法:</h3><h4 id="方法包含一个方法头和一个方法体，下面是一个方法的所有部分："><a href="#方法包含一个方法头和一个方法体，下面是一个方法的所有部分：" class="headerlink" title="方法包含一个方法头和一个方法体，下面是一个方法的所有部分："></a>方法包含一个方法头和一个方法体，下面是一个方法的所有部分：</h4><h5 id="修饰符：修饰符-这是可选的，告诉编译器如何调用该方法，定义了该方法的访问类型。"><a href="#修饰符：修饰符-这是可选的，告诉编译器如何调用该方法，定义了该方法的访问类型。" class="headerlink" title="修饰符：修饰符,这是可选的，告诉编译器如何调用该方法，定义了该方法的访问类型。"></a>修饰符：修饰符,这是可选的，告诉编译器如何调用该方法，定义了该方法的访问类型。</h5><h5 id="返回值类型：方法可能会返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下-returnValueType-是关键字-void；"><a href="#返回值类型：方法可能会返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下-returnValueType-是关键字-void；" class="headerlink" title="返回值类型：方法可能会返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下,returnValueType 是关键字 void；"></a>返回值类型：方法可能会返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下,returnValueType 是关键字 void；</h5><h5 id="方法名：是方法的实际名称，方法名和参数表共同构成方法签名。"><a href="#方法名：是方法的实际名称，方法名和参数表共同构成方法签名。" class="headerlink" title="方法名：是方法的实际名称，方法名和参数表共同构成方法签名。"></a>方法名：是方法的实际名称，方法名和参数表共同构成方法签名。</h5><h5 id="参数类型：参数像是一个占位符，当方法被调用时，传递值给参数。这个值称之为实参或者变量。参数列表是之方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。"><a href="#参数类型：参数像是一个占位符，当方法被调用时，传递值给参数。这个值称之为实参或者变量。参数列表是之方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。" class="headerlink" title="参数类型：参数像是一个占位符，当方法被调用时，传递值给参数。这个值称之为实参或者变量。参数列表是之方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。"></a>参数类型：参数像是一个占位符，当方法被调用时，传递值给参数。这个值称之为实参或者变量。参数列表是之方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</h5><h5 id="形式参数-用来定义作用的-创建方法时用到。"><a href="#形式参数-用来定义作用的-创建方法时用到。" class="headerlink" title="形式参数: 用来定义作用的 创建方法时用到。"></a>形式参数: 用来定义作用的 创建方法时用到。</h5><h5 id="实际参数-实际调用传递过去的参数"><a href="#实际参数-实际调用传递过去的参数" class="headerlink" title="实际参数:实际调用传递过去的参数"></a>实际参数:实际调用传递过去的参数</h5><h5 id="方法体-方法下包含的代码实现功能"><a href="#方法体-方法下包含的代码实现功能" class="headerlink" title="方法体:方法下包含的代码实现功能"></a>方法体:方法下包含的代码实现功能</h5><h5 id="return-返回值-方法有传参一定要有返回值。他也是一种终止语句。"><a href="#return-返回值-方法有传参一定要有返回值。他也是一种终止语句。" class="headerlink" title="return : 返回值 方法有传参一定要有返回值。他也是一种终止语句。"></a>return : 返回值 方法有传参一定要有返回值。他也是一种终止语句。</h5><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><h4 id="调用方法：对象名-方法名-实参列表"><a href="#调用方法：对象名-方法名-实参列表" class="headerlink" title="调用方法：对象名.方法名(实参列表)"></a>调用方法：对象名.方法名(实参列表)</h4><h5 id="Java方法支持两种调用方法的方式，根据方法是否返回值来选择。"><a href="#Java方法支持两种调用方法的方式，根据方法是否返回值来选择。" class="headerlink" title="Java方法支持两种调用方法的方式，根据方法是否返回值来选择。"></a>Java方法支持两种调用方法的方式，根据方法是否返回值来选择。</h5><h5 id="当方法返回一个值的时候，方法调用通常被当作一个值。例如"><a href="#当方法返回一个值的时候，方法调用通常被当作一个值。例如" class="headerlink" title="当方法返回一个值的时候，方法调用通常被当作一个值。例如:"></a>当方法返回一个值的时候，方法调用通常被当作一个值。例如:</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> larger = max(<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure>

<h5 id="如果方法返回值是void，方法调用一定是一条语句。"><a href="#如果方法返回值是void，方法调用一定是一条语句。" class="headerlink" title="如果方法返回值是void，方法调用一定是一条语句。"></a>如果方法返回值是void，方法调用一定是一条语句。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;hello,&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 学习目录(连载中)</title>
    <url>/2021/05/14/Mysql%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Scanner对象</title>
    <url>/2021/05/09/Scanner%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h3><h4 id="是实现人机交互的工具类，通过Scanner类来获取用户的输入。"><a href="#是实现人机交互的工具类，通过Scanner类来获取用户的输入。" class="headerlink" title="是实现人机交互的工具类，通过Scanner类来获取用户的输入。"></a>是实现人机交互的工具类，通过Scanner类来获取用户的输入。</h4><h4 id="基本的语法："><a href="#基本的语法：" class="headerlink" title="基本的语法："></a>基本的语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个扫描器对象，用于接收键盘数据</span></span><br><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in)</span><br></pre></td></tr></table></figure>

<h4 id="通过Scanner类的next-与nextLine-方法获取输入的字符串，在读取前我们一般需要使用-hasNext-与hasNextLine-来判断是否还有输入的数据"><a href="#通过Scanner类的next-与nextLine-方法获取输入的字符串，在读取前我们一般需要使用-hasNext-与hasNextLine-来判断是否还有输入的数据" class="headerlink" title="通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用 hasNext()与hasNextLine()来判断是否还有输入的数据"></a>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取前我们一般需要使用 hasNext()与hasNextLine()来判断是否还有输入的数据</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断用户有没有输入字符</span></span><br><span class="line"><span class="keyword">if</span>(Scanner.hasNext())&#123;</span><br><span class="line"><span class="comment">//使用next方式接收</span></span><br><span class="line">String str = Scanner.next();</span><br><span class="line">System.out.println(<span class="string">&quot;输出的内容为&quot;</span>+str)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//凡是属于IO流的泪如果不关闭会一直占用资源，要养成好习惯用完就关掉</span></span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure>

<h5 id="next"><a href="#next" class="headerlink" title="next():"></a>next():</h5><h5 id="1-一定要读取到有效字符后才可以结束输入。"><a href="#1-一定要读取到有效字符后才可以结束输入。" class="headerlink" title="1. 一定要读取到有效字符后才可以结束输入。"></a>1. 一定要读取到有效字符后才可以结束输入。</h5><h5 id="2-对输入的有效字符之前遇到的空白，next-方法会自动将其去掉。"><a href="#2-对输入的有效字符之前遇到的空白，next-方法会自动将其去掉。" class="headerlink" title="2. 对输入的有效字符之前遇到的空白，next()方法会自动将其去掉。"></a>2. 对输入的有效字符之前遇到的空白，next()方法会自动将其去掉。</h5><h5 id="3-只要有输入有小字符后才将其后面输入的空白作为分隔符或者结束符。"><a href="#3-只要有输入有小字符后才将其后面输入的空白作为分隔符或者结束符。" class="headerlink" title="3. 只要有输入有小字符后才将其后面输入的空白作为分隔符或者结束符。"></a>3. 只要有输入有小字符后才将其后面输入的空白作为分隔符或者结束符。</h5><h5 id="4-next-不能得到带有空格的字符串。"><a href="#4-next-不能得到带有空格的字符串。" class="headerlink" title="4. next()不能得到带有空格的字符串。"></a>4. next()不能得到带有空格的字符串。</h5><h4 id="nextLine"><a href="#nextLine" class="headerlink" title="nextLine();"></a>nextLine();</h4><h5 id="1-以回车位结束符，也就是说nextLine-方法返回的是输入回车之前的所有字符。"><a href="#1-以回车位结束符，也就是说nextLine-方法返回的是输入回车之前的所有字符。" class="headerlink" title="1. 以回车位结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符。"></a>1. 以回车位结束符，也就是说nextLine()方法返回的是输入回车之前的所有字符。</h5><h5 id="2-可以获得空白"><a href="#2-可以获得空白" class="headerlink" title="2. 可以获得空白"></a>2. 可以获得空白</h5>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 学习目录(连载中)</title>
    <url>/2021/05/14/java%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="今天开始正式写Java笔记"><a href="#今天开始正式写Java笔记" class="headerlink" title="今天开始正式写Java笔记"></a>今天开始正式写Java笔记</h1><blockquote>
<h2 id="为什么要写Java笔记？"><a href="#为什么要写Java笔记？" class="headerlink" title="为什么要写Java笔记？"></a>为什么要写Java笔记？</h2></blockquote>
<blockquote>
<p>作为一个学习技术和分享笔记的小博客</p>
<p>本着学习和分享Java菜鸟笔记开始有目录了。<del>在这里我要立个Flag，从入门到入坟一定要坚持写完</del>。顺便巩固一下自己的基础（就是因为鄙人太菜了，哎~），生存不易,还需努力！！！</p>
</blockquote>
<h3 id="最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！"><a href="#最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！" class="headerlink" title="最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！"></a>最主要的是我觉的基础真的真的真的是超级重要，只有你基础牢，才可以把后面的框架学好，理解清楚！！！</h3><hr>
<h4 id="JAVA笔记将会分为以下几个阶段"><a href="#JAVA笔记将会分为以下几个阶段" class="headerlink" title="JAVA笔记将会分为以下几个阶段"></a>JAVA笔记将会分为以下几个阶段</h4><h1 id="（目录）"><a href="#（目录）" class="headerlink" title="（目录）"></a><strong>（目录）</strong></h1><h1 id="一、JAVA入门"><a href="#一、JAVA入门" class="headerlink" title="一、JAVA入门"></a>一、JAVA入门</h1><ul>
<li><h2 id="Java快速入门"><a href="#Java快速入门" class="headerlink" title="Java快速入门"></a>Java快速入门</h2><ol>
<li><h4 id="JAVA简介"><a href="#JAVA简介" class="headerlink" title="JAVA简介"></a><a href="https://baike.baidu.com/item/java/85979?fromtitle=Java%E8%AF%AD%E8%A8%80&fromid=4148931#1">JAVA简介</a></h4></li>
<li><h4 id="关键字以及数据类型"><a href="#关键字以及数据类型" class="headerlink" title="关键字以及数据类型"></a><a href="https://javaspans.github.io/blog/posts/1f3c832.html">关键字以及数据类型</a></h4></li>
<li><h4 id="变量是什么"><a href="#变量是什么" class="headerlink" title="变量是什么"></a><a href="https://javaspans.github.io/blog/posts/94320cfe.html">变量是什么</a></h4></li>
<li><h4 id="类型的转换"><a href="#类型的转换" class="headerlink" title="类型的转换"></a><a href="https://cxq21.gitee.io/posts/335f9f1b.html">类型的转换</a></h4></li>
<li><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><a href="https://javaspans.github.io/blog/posts/f29265a7.html">运算符</a></h4></li>
<li><h4 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a><a href="https://javaspans.github.io/blog/posts/e2abe5ec.html">Scanner对象</a></h4></li>
<li><h4 id="顺序结构和IF选择结构"><a href="#顺序结构和IF选择结构" class="headerlink" title="顺序结构和IF选择结构"></a><a href="https://javaspans.github.io/blog/posts/d7363e83.html">顺序结构和IF选择结构</a></h4></li>
<li><h4 id="循环结构三大循环"><a href="#循环结构三大循环" class="headerlink" title="循环结构三大循环"></a><a href="https://javaspans.github.io/blog/posts/5f91e7e3.html">循环结构三大循环</a></h4></li>
<li><h4 id="方-法"><a href="#方-法" class="headerlink" title="方 法"></a><a href="https://javaspans.github.io/blog/posts/69244af4.html">方 法</a></h4></li>
<li><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a><a href="https://javaspans.github.io/blog/posts/70ec998a.html">方法的重载</a></h4></li>
<li><h4 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a><a href="javaspans.github.io/blog/posts/4a246c51.html">命令行传参</a></h4></li>
<li><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a><a href="javaspans.github.io/blog/posts/6963fb18.html">可变参数</a></h4></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>其他学习拓展(连载中)</title>
    <url>/2021/05/14/%E5%85%B6%E4%BB%96%E6%89%A9%E5%B1%95%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>关键字以及数据类型(扩展)</title>
    <url>/2021/05/06/%E5%85%B3%E9%94%AE%E5%AD%97%E4%BB%A5%E5%8F%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%89%A9%E5%B1%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="关键字以及数据类型-扩展"><a href="#关键字以及数据类型-扩展" class="headerlink" title="关键字以及数据类型(扩展)"></a>关键字以及数据类型(扩展)</h1><h4 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h4><table>
<thead>
<tr>
<th>abstract</th>
<th>assert</th>
<th>boolean</th>
<th>break</th>
<th>byte</th>
</tr>
</thead>
<tbody><tr>
<td>case</td>
<td>catch</td>
<td>char</td>
<td>class</td>
<td>const</td>
</tr>
<tr>
<td>continue</td>
<td>default</td>
<td>do</td>
<td>double</td>
<td>else</td>
</tr>
<tr>
<td>enum</td>
<td>extends</td>
<td>final</td>
<td>finally</td>
<td>float</td>
</tr>
<tr>
<td>for</td>
<td>goto</td>
<td>if</td>
<td>implements</td>
<td>import</td>
</tr>
<tr>
<td>instanceof</td>
<td>int</td>
<td>interface</td>
<td>long</td>
<td>native</td>
</tr>
<tr>
<td>new</td>
<td>package</td>
<td>private</td>
<td>protected</td>
<td>public</td>
</tr>
<tr>
<td>return</td>
<td>strictfp</td>
<td>short</td>
<td>static</td>
<td>super</td>
</tr>
<tr>
<td>switch</td>
<td>synchronized</td>
<td>this</td>
<td>throw</td>
<td>throws</td>
</tr>
<tr>
<td>transient</td>
<td>try</td>
<td>void</td>
<td>volatile</td>
<td>while</td>
</tr>
</tbody></table>
<h3 id="JAVA的数据类型分为两大类"><a href="#JAVA的数据类型分为两大类" class="headerlink" title="JAVA的数据类型分为两大类"></a>JAVA的数据类型分为两大类</h3><pre><code>#### 基本类型 (primitive type)
</code></pre>
<h4 id="引用类型-reference-type"><a href="#引用类型-reference-type" class="headerlink" title="引用类型(reference type)"></a>引用类型(reference type)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">							基本数据类型(primitive type)</span><br><span class="line">		数值类型														boolean类型</span><br><span class="line">byte 占用一个字节范围:-128 - 127									占用一位其值只有true和false两个</span><br><span class="line">short 占两个字节范围:-32768 - 32767									   浮点类型</span><br><span class="line">int	  占四个字节范围 -2147483648 - 2147483647							folat 占用四个字节</span><br><span class="line">long 占八个字节范围: -9223372036854775808 - 9223372036854775807		double 占用八个字节</span><br><span class="line">		字符类型</span><br><span class="line">char占两个字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">					引用数据类型(Reference Type)</span><br><span class="line">类						接口						数组</span><br></pre></td></tr></table></figure>



<h3 id="标识符注意点"><a href="#标识符注意点" class="headerlink" title="标识符注意点"></a>标识符注意点</h3><ul>
<li><p>​    所有点标识符都应该以字母 (A-Z或者a-z)，美元符($)、或者下划线(_)开始</p>
</li>
<li><p>首字符之后可以是字母(A-Z或则a-z),美元符($)、或者下划线(_)或者数字的任何字符组合</p>
</li>
<li><p>不能使用关键字作为变量名或者方法名。</p>
</li>
<li><p>标识符是大小写敏感的。</p>
</li>
<li><p>合法标识符举例: age、$salary、_value 、__1 _value</p>
</li>
<li><p>非法标识符举例：123abc 、-salary 、#abc</p>
</li>
<li><p>可以使用中文命名,但是不推荐使用。</p>
</li>
</ul>
<h3 id="强类型语言"><a href="#强类型语言" class="headerlink" title="强类型语言"></a>强类型语言</h3><h4 id="要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用"><a href="#要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用" class="headerlink" title="要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用"></a>要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用</h4><h3 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h3><h4 id="位-bit-是计算机-内部数据-存储的最小单位-，11001100是以个八位二进制的数。"><a href="#位-bit-是计算机-内部数据-存储的最小单位-，11001100是以个八位二进制的数。" class="headerlink" title="位(bit):是计算机 内部数据 存储的最小单位 ，11001100是以个八位二进制的数。"></a>位(bit):是计算机 内部数据 存储的最小单位 ，11001100是以个八位二进制的数。</h4><h4 id="字节-byte-：是计算机中-数据处理的基本单位，习惯上用大写B来表示。"><a href="#字节-byte-：是计算机中-数据处理的基本单位，习惯上用大写B来表示。" class="headerlink" title="字节(byte)：是计算机中 数据处理的基本单位，习惯上用大写B来表示。"></a>字节(byte)：是计算机中 数据处理的基本单位，习惯上用大写B来表示。</h4><h4 id="1B-byte-字节-8bit-位"><a href="#1B-byte-字节-8bit-位" class="headerlink" title="1B(byte,字节) = 8bit(位)"></a>1B(byte,字节) = 8bit(位)</h4><h4 id="字符：是指计算机中使用的字母，数字，子和符号。"><a href="#字符：是指计算机中使用的字母，数字，子和符号。" class="headerlink" title="字符：是指计算机中使用的字母，数字，子和符号。"></a>字符：是指计算机中使用的字母，数字，子和符号。</h4><h3 id="拓展知识："><a href="#拓展知识：" class="headerlink" title="拓展知识："></a>拓展知识：</h3><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><p>​    二进制         0b</p>
<p>​    八进制        0</p>
<p>​    十六进制     0x</p>
<h4 id="浮点数拓展"><a href="#浮点数拓展" class="headerlink" title="浮点数拓展"></a>浮点数拓展</h4><p>BigDecimal 数学工具类</p>
<p>// float  在数字上表现 大约 接近但不等于</p>
<p>//double </p>
<h4 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h4><p>//   \t 制表符</p>
<p>// \换行</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>变量是什么</title>
    <url>/2021/05/06/%E5%8F%98%E9%87%8F%E5%8F%8A%E5%B8%B8%E9%87%8F%E7%9A%84%E5%8E%9F%E5%88%99%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量是什么：就是可以变换的量！"><a href="#变量是什么：就是可以变换的量！" class="headerlink" title="变量是什么：就是可以变换的量！"></a>变量是什么：就是可以变换的量！</h2><h3 id="java-是一种强类型语言，没个变量都必须声明其类型。"><a href="#java-是一种强类型语言，没个变量都必须声明其类型。" class="headerlink" title="java 是一种强类型语言，没个变量都必须声明其类型。"></a>java 是一种强类型语言，没个变量都必须声明其类型。</h3><h3 id="java是程序中最基本的存储单元，其要素包括包括变量名，变量类型和作用域。"><a href="#java是程序中最基本的存储单元，其要素包括包括变量名，变量类型和作用域。" class="headerlink" title="java是程序中最基本的存储单元，其要素包括包括变量名，变量类型和作用域。"></a>java是程序中最基本的存储单元，其要素包括包括变量名，变量类型和作用域。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type varName  [=value]  [&#123;,varName[=value]&#125;];    </span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h2><h3 id="1-每个变量都有类型，类型可以是基本类型，也可以是引用类型。"><a href="#1-每个变量都有类型，类型可以是基本类型，也可以是引用类型。" class="headerlink" title="1.每个变量都有类型，类型可以是基本类型，也可以是引用类型。"></a>1.每个变量都有类型，类型可以是基本类型，也可以是引用类型。</h3><h3 id="2-变量名必须是合法的标识符。"><a href="#2-变量名必须是合法的标识符。" class="headerlink" title="2.变量名必须是合法的标识符。"></a>2.变量名必须是合法的标识符。</h3><h3 id="3-变量声明是一条完整的语句，因此没一个声明都必须以分号结束"><a href="#3-变量声明是一条完整的语句，因此没一个声明都必须以分号结束" class="headerlink" title="3.变量声明是一条完整的语句，因此没一个声明都必须以分号结束"></a>3.变量声明是一条完整的语句，因此没一个声明都必须以分号结束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F;类变量 static</span><br><span class="line"></span><br><span class="line">​	static double salary &#x3D;2500;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;属性:变量</span><br><span class="line"></span><br><span class="line">​	&#x2F;&#x2F;实例变量：从属于对象；如果不自行初始化，这个类型的默认值  0  0.0；</span><br><span class="line"></span><br><span class="line">​	&#x2F;&#x2F;布尔值： 默认是false</span><br><span class="line"></span><br><span class="line">​	&#x2F;&#x2F;除了基本类型，其余的默认值都是null；</span><br><span class="line"></span><br><span class="line">​	String  name;</span><br><span class="line"></span><br><span class="line">​		int  age;</span><br></pre></td></tr></table></figure>



<h3 id="1-局部变量-是在方法里的-必须声明以及初始化值。"><a href="#1-局部变量-是在方法里的-必须声明以及初始化值。" class="headerlink" title="1. 局部变量:是在方法里的,必须声明以及初始化值。"></a>1. 局部变量:是在方法里的,必须声明以及初始化值。</h3><h3 id="2-实例变量：从属于对象中；如果不初始化，会给一个默认值，如-int-0；double-0-0；boolean默认值是false；其他除了基本数据类型-其余默认值为-null；"><a href="#2-实例变量：从属于对象中；如果不初始化，会给一个默认值，如-int-0；double-0-0；boolean默认值是false；其他除了基本数据类型-其余默认值为-null；" class="headerlink" title="2.实例变量：从属于对象中；如果不初始化，会给一个默认值，如 int = 0；double =0.0；boolean默认值是false；其他除了基本数据类型 其余默认值为 null；"></a>2.实例变量：从属于对象中；如果不初始化，会给一个默认值，如 int = 0；double =0.0；boolean默认值是false；其他除了基本数据类型 其余默认值为 null；</h3><h3 id="3-类变量：static-从属于类中"><a href="#3-类变量：static-从属于类中" class="headerlink" title="3. 类变量：static 从属于类中"></a>3. 类变量：static 从属于类中</h3><h4 id="类变量-格式："><a href="#类变量-格式：" class="headerlink" title="类变量 格式："></a>类变量 格式：</h4><h5 id="static-变量类型-变量名-值；"><a href="#static-变量类型-变量名-值；" class="headerlink" title="static 变量类型 变量名 = 值；"></a>static 变量类型 变量名 = 值；</h5><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h4 id="常量-Constant-初始化-initialize-后不能再改变值！它是一个不会变动的值。"><a href="#常量-Constant-初始化-initialize-后不能再改变值！它是一个不会变动的值。" class="headerlink" title="常量(Constant): 初始化(initialize)后不能再改变值！它是一个不会变动的值。"></a>常量(Constant): 初始化(initialize)后不能再改变值！它是一个不会变动的值。</h4><h4 id="所谓常量是可以理解为一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。"><a href="#所谓常量是可以理解为一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。" class="headerlink" title="所谓常量是可以理解为一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。"></a>所谓常量是可以理解为一种特殊的变量，它的值被设定后，在程序运行过程中不允许被改变。</h4><p>​    <code>final 常量名 = 值；</code>            </p>
<p>​    <code>final double PI =3.14;</code></p>
<h4 id="常量名一般用大写字符。"><a href="#常量名一般用大写字符。" class="headerlink" title="常量名一般用大写字符。"></a>常量名一般用大写字符。</h4><h3 id="常量是一个一次赋值不可改变的值；"><a href="#常量是一个一次赋值不可改变的值；" class="headerlink" title="常量是一个一次赋值不可改变的值；"></a>常量是一个一次赋值不可改变的值；</h3><h3 id="常量的名-一定要大写；"><a href="#常量的名-一定要大写；" class="headerlink" title="常量的名 一定要大写；"></a>常量的名 一定要大写；</h3><h3 id="常量格式：static-static-类型-值；"><a href="#常量格式：static-static-类型-值；" class="headerlink" title="常量格式：static static 类型=值；"></a>常量格式：static static 类型=值；</h3><h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><pre><code>1.所有的变量、方法、类名：见名知意
</code></pre>
<h4 id="2-类成员变量：首字母小写和驼峰原则：monthSalary-除了第一个单词意外，后面的单词首字母大写"><a href="#2-类成员变量：首字母小写和驼峰原则：monthSalary-除了第一个单词意外，后面的单词首字母大写" class="headerlink" title="2.类成员变量：首字母小写和驼峰原则：monthSalary 除了第一个单词意外，后面的单词首字母大写"></a>2.类成员变量：首字母小写和驼峰原则：monthSalary 除了第一个单词意外，后面的单词首字母大写</h4><h4 id="3-局部变量：首字母小写和驼峰原则"><a href="#3-局部变量：首字母小写和驼峰原则" class="headerlink" title="3.局部变量：首字母小写和驼峰原则"></a>3.局部变量：首字母小写和驼峰原则</h4><h4 id="4-常量：大写字母和下划线-MAX-VALUE"><a href="#4-常量：大写字母和下划线-MAX-VALUE" class="headerlink" title="4.常量：大写字母和下划线:MAX_VALUE"></a>4.常量：大写字母和下划线:MAX_VALUE</h4><h4 id="5-类名：首字母大写和驼峰原则：Man，GoodMan"><a href="#5-类名：首字母大写和驼峰原则：Man，GoodMan" class="headerlink" title="5.类名：首字母大写和驼峰原则：Man，GoodMan"></a>5.类名：首字母大写和驼峰原则：Man，GoodMan</h4><h4 id="6-方法名：首字母小写和驼峰原则-：run-runRun"><a href="#6-方法名：首字母小写和驼峰原则-：run-runRun" class="headerlink" title="6. 方法名：首字母小写和驼峰原则 ：run(), runRun()"></a>6. 方法名：首字母小写和驼峰原则 ：run(), runRun()</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行传参</title>
    <url>/2021/05/16/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%A0%E5%8F%82/</url>
    <content><![CDATA[<h3 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h3><h4 id="有时候你希望运行一个程序时候在传递给它消息，这得靠传递命令行参数给main-函数实现。"><a href="#有时候你希望运行一个程序时候在传递给它消息，这得靠传递命令行参数给main-函数实现。" class="headerlink" title="有时候你希望运行一个程序时候在传递给它消息，这得靠传递命令行参数给main()函数实现。"></a>有时候你希望运行一个程序时候在传递给它消息，这得靠传递命令行参数给main()函数实现。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//主方法 mian方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">          <span class="comment">//便利主方法内的数组长度</span></span><br><span class="line">          System.out.println(args[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>命令行下执行</p>
<p>javac  包名.类名</p>
<p>java 包名.类名   参数</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>可变参数</title>
    <url>/2021/05/16/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<h3 id="可变参数-不定项参数"><a href="#可变参数-不定项参数" class="headerlink" title="可变参数(不定项参数)"></a>可变参数(不定项参数)</h3><ul>
<li><h4 id="在jdk-1-5-开始-，java支持传递同类型的可变参数给一个方法"><a href="#在jdk-1-5-开始-，java支持传递同类型的可变参数给一个方法" class="headerlink" title="在jdk 1.5 开始 ，java支持传递同类型的可变参数给一个方法"></a>在jdk 1.5 开始 ，java支持传递同类型的可变参数给一个方法</h4></li>
<li><h4 id="在方法声明中，在指定参数类型后加一个省略号-…-本质就是数组"><a href="#在方法声明中，在指定参数类型后加一个省略号-…-本质就是数组" class="headerlink" title="在方法声明中，在指定参数类型后加一个省略号(…),[  本质就是数组  ]"></a>在方法声明中，在指定参数类型后加一个省略号(…),[  本质就是数组  ]</h4></li>
<li><h4 id="一个方法中只能指定一个可变参数，他必须是方法最后一个参数，任何普通的参数必须在它之前声明。"><a href="#一个方法中只能指定一个可变参数，他必须是方法最后一个参数，任何普通的参数必须在它之前声明。" class="headerlink" title="一个方法中只能指定一个可变参数，他必须是方法最后一个参数，任何普通的参数必须在它之前声明。"></a>一个方法中只能指定一个可变参数，他必须是方法最后一个参数，任何普通的参数必须在它之前声明。</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ClassDemo01 demo = <span class="keyword">new</span> ClassDemo01();</span><br><span class="line">    	demo.test();</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span>... i)</span></span>&#123;</span><br><span class="line">   		System.out.println(i[<span class="number">0</span>]);  </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CLassDemo0</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            printlnMax(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">45</span>,<span class="number">465</span>,<span class="number">456</span>,<span class="number">465</span>);</span><br><span class="line">            printlnMax(<span class="number">3333</span>,<span class="number">333</span>,<span class="number">33</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">33</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">33</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printlnMax</span><span class="params">(<span class="keyword">double</span> ...nbm)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nbm.length == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;数据出错&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">double</span> res = nbm[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nbm.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nbm[i]&gt;res)&#123;</span><br><span class="line">                res = nbm[i];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大&quot;</span>+res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>多态</title>
    <url>/2021/05/06/%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="多态的格式："><a href="#多态的格式：" class="headerlink" title="多态的格式："></a>多态的格式：</h2><h3 id="父类名-对象名-new-子类的构造方法-传参"><a href="#父类名-对象名-new-子类的构造方法-传参" class="headerlink" title="父类名  对象名 = new 子类的构造方法(传参);"></a>父类名  对象名 = new 子类的构造方法(传参);</h3><h3 id="接口名-对象名-new-实现类名"><a href="#接口名-对象名-new-实现类名" class="headerlink" title="接口名  对象名 = new  实现类名();"></a>接口名  对象名 = new  实现类名();</h3><h2 id="多态创建的对象有什么特点？"><a href="#多态创建的对象有什么特点？" class="headerlink" title="多态创建的对象有什么特点？"></a>多态创建的对象有什么特点？</h2><ul>
<li><h4 id="使用变量：使用的是父类中的变量，调用不了子类中的变量"><a href="#使用变量：使用的是父类中的变量，调用不了子类中的变量" class="headerlink" title="使用变量：使用的是父类中的变量，调用不了子类中的变量"></a>使用变量：使用的是父类中的变量，调用不了子类中的变量</h4></li>
<li><h4 id="调用方法：调用的是子类中重写父类的方法-只有被重写的方法才能被调用到"><a href="#调用方法：调用的是子类中重写父类的方法-只有被重写的方法才能被调用到" class="headerlink" title="调用方法：调用的是子类中重写父类的方法(只有被重写的方法才能被调用到)"></a>调用方法：调用的是子类中重写父类的方法(只有被重写的方法才能被调用到)</h4></li>
</ul>
<p>​    </p>
<h3 id="多态的好处："><a href="#多态的好处：" class="headerlink" title="多态的好处："></a>多态的好处：</h3><h3 id="类型转换："><a href="#类型转换：" class="headerlink" title="类型转换："></a>类型转换：</h3><ul>
<li><h4 id="子类向父类转换-—–-自动转换"><a href="#子类向父类转换-—–-自动转换" class="headerlink" title="子类向父类转换 —– 自动转换"></a>子类向父类转换 —– 自动转换</h4></li>
<li><h4 id="父类向子类转换-—–-强制转换"><a href="#父类向子类转换-—–-强制转换" class="headerlink" title="父类向子类转换 —– 强制转换"></a>父类向子类转换 —– 强制转换</h4></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的建设及踩坑</title>
    <url>/2021/05/14/%E5%BB%BA%E8%AE%AE/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>循环结构三大循环</title>
    <url>/2021/05/11/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h4><h4 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h4><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><h5 id="while-是最基本的循环，他的结构为"><a href="#while-是最基本的循环，他的结构为" class="headerlink" title="while 是最基本的循环，他的结构为:"></a>while 是最基本的循环，他的结构为:</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>（不二表达式）&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环体内容&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="只要布尔表达式为TRUE，循环就会一直执行下去。"><a href="#只要布尔表达式为TRUE，循环就会一直执行下去。" class="headerlink" title="只要布尔表达式为TRUE，循环就会一直执行下去。"></a>只要布尔表达式为TRUE，循环就会一直执行下去。</h4><h4 id="我们大多数情况是会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环。"><a href="#我们大多数情况是会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环。" class="headerlink" title="我们大多数情况是会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环。"></a>我们大多数情况是会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环。</h4><h4 id="少部分情况需要循环一直执行例如服务器响应监听。"><a href="#少部分情况需要循环一直执行例如服务器响应监听。" class="headerlink" title="少部分情况需要循环一直执行例如服务器响应监听。"></a>少部分情况需要循环一直执行例如服务器响应监听。</h4><h4 id="循环条件一直为TRUE就会造成死循环，我们正常的业务编程中应该尽量避免死循环，会影响程序性能或者造成程序卡死崩溃！"><a href="#循环条件一直为TRUE就会造成死循环，我们正常的业务编程中应该尽量避免死循环，会影响程序性能或者造成程序卡死崩溃！" class="headerlink" title="循环条件一直为TRUE就会造成死循环，我们正常的业务编程中应该尽量避免死循环，会影响程序性能或者造成程序卡死崩溃！"></a>循环条件一直为TRUE就会造成死循环，我们正常的业务编程中应该尽量避免死循环，会影响程序性能或者造成程序卡死崩溃！</h4><h3 id="do-while-循环-1"><a href="#do-while-循环-1" class="headerlink" title="do while 循环"></a>do while 循环</h3><h4 id="对于while-语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件也至少执行一次。"><a href="#对于while-语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件也至少执行一次。" class="headerlink" title="对于while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件也至少执行一次。"></a>对于while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件也至少执行一次。</h4><h4 id="do-while-循环和while循环相似，不同的是，do-while-循环至少执行一次。"><a href="#do-while-循环和while循环相似，不同的是，do-while-循环至少执行一次。" class="headerlink" title="do while 循环和while循环相似，不同的是，do while 循环至少执行一次。"></a>do while 循环和while循环相似，不同的是，do while 循环至少执行一次。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码语句，循环体&#125;while（布尔表达式）;</span></span><br></pre></td></tr></table></figure>

<h4 id="while和do-while的区别"><a href="#while和do-while的区别" class="headerlink" title="while和do while的区别:"></a>while和do while的区别:</h4><ol>
<li><p>while先判断后执行,do while是先执行后判断！</p>
</li>
<li><p>do while 总是保证循环体会之前被执行一次！这是他们的主要差别</p>
</li>
</ol>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="虽然所有循环体结构都可以用while或者do-while表示-但JAVA提供了另一种for循环-使一些循环结构变得更加简单"><a href="#虽然所有循环体结构都可以用while或者do-while表示-但JAVA提供了另一种for循环-使一些循环结构变得更加简单" class="headerlink" title="虽然所有循环体结构都可以用while或者do..while表示,但JAVA提供了另一种for循环,使一些循环结构变得更加简单"></a>虽然所有循环体结构都可以用while或者do..while表示,但JAVA提供了另一种for循环,使一些循环结构变得更加简单</h4><h4 id="for循环语句是支持跌代的一种通用结构-是最有效-最灵活的一种结构"><a href="#for循环语句是支持跌代的一种通用结构-是最有效-最灵活的一种结构" class="headerlink" title="for循环语句是支持跌代的一种通用结构,是最有效,最灵活的一种结构"></a>for循环语句是支持跌代的一种通用结构,是最有效,最灵活的一种结构</h4><h4 id="for-循执行的次数是在执行前就确定的代码语句"><a href="#for-循执行的次数是在执行前就确定的代码语句" class="headerlink" title="for 循执行的次数是在执行前就确定的代码语句:"></a>for 循执行的次数是在执行前就确定的代码语句:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新或步进语句)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码循环体;代码语句;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;<span class="comment">//初始化条件</span></span><br><span class="line">        <span class="keyword">while</span>(a&lt;=<span class="number">100</span>)&#123;<span class="comment">//条件判断</span></span><br><span class="line">            System.out.println(a);<span class="comment">//循环体</span></span><br><span class="line">            a+=<span class="number">2</span>; <span class="comment">//迭代</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;while 循环结束&quot;</span>);</span><br><span class="line">        <span class="comment">//初始化 //条件判断 //迭代</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System-out.println(<span class="string">&quot;for循环结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="关于-for-循环有以下几点说明："><a href="#关于-for-循环有以下几点说明：" class="headerlink" title="关于 for 循环有以下几点说明："></a>关于 for 循环有以下几点说明：</h4><h5 id="1-最先执行初始化步骤，可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。-死循环"><a href="#1-最先执行初始化步骤，可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。-死循环" class="headerlink" title="1.最先执行初始化步骤，可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。(死循环)"></a>1.最先执行初始化步骤，可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。(死循环)</h5><h5 id="2-然后检车布尔表达式的值，如果是true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。"><a href="#2-然后检车布尔表达式的值，如果是true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。" class="headerlink" title="2.然后检车布尔表达式的值，如果是true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。"></a>2.然后检车布尔表达式的值，如果是true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</h5><h5 id="3-执行一次循环后，更新循环控制变量-迭代因子控制循环变量的增减-。再次执行上面的过程。"><a href="#3-执行一次循环后，更新循环控制变量-迭代因子控制循环变量的增减-。再次执行上面的过程。" class="headerlink" title="3.执行一次循环后，更新循环控制变量(迭代因子控制循环变量的增减)。再次执行上面的过程。"></a>3.执行一次循环后，更新循环控制变量(迭代因子控制循环变量的增减)。再次执行上面的过程。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死循环</span></span><br><span class="line"><span class="keyword">for</span>(; ;)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo02</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出1-1000被5整除的数字并一行显示4个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">             <span class="keyword">if</span> (i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                 System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span> (i%(<span class="number">5</span>*<span class="number">3</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                 System.out.println();</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">          <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">while</span>(j&lt;=<span class="number">1000</span>)&#123;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (j%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.print(j + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (j%<span class="number">20</span>==<span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 0- 100 奇数 偶数、之和</span></span><br><span class="line">            <span class="keyword">int</span> oddSum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> evenSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                oddSum+=i;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                evenSum+=i;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(evenSum);</span><br><span class="line">        System.out.println(oddSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo05</span> </span>&#123;</span><br><span class="line"><span class="comment">// 9 9乘法表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="增强for-循环"><a href="#增强for-循环" class="headerlink" title="增强for 循环"></a>增强for 循环</h4><h5 id="这里先做了解-之后数组和集合重点使用"><a href="#这里先做了解-之后数组和集合重点使用" class="headerlink" title="这里先做了解,之后数组和集合重点使用"></a>这里先做了解,之后数组和集合重点使用</h5><p>格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(声明语句:表达式)&#123;</span><br><span class="line">&#x2F;&#x2F;代码句子</span><br><span class="line">&#125;</span><br><span class="line">public class ForDemo06 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int [] num &#x3D;&#123;10,20,30,40&#125;;&#x2F;&#x2F;定义了一个数组</span><br><span class="line"></span><br><span class="line">        for (int i &#x3D;0; i&lt;5 ; i++)&#123;</span><br><span class="line">            System.out.println(num[i]);</span><br><span class="line">            System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;遍历数组元素  增强for循环核心还是上者</span><br><span class="line">        for (int x :num)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域在循环语句块，其值与此时数组元素的值相等。"><a href="#声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域在循环语句块，其值与此时数组元素的值相等。" class="headerlink" title="声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域在循环语句块，其值与此时数组元素的值相等。"></a>声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域在循环语句块，其值与此时数组元素的值相等。</h4><h4 id="表达式-表达式时要访问的数组名，或者是返回值为数组的方法。"><a href="#表达式-表达式时要访问的数组名，或者是返回值为数组的方法。" class="headerlink" title="表达式: 表达式时要访问的数组名，或者是返回值为数组的方法。"></a>表达式: 表达式时要访问的数组名，或者是返回值为数组的方法。</h4><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><ul>
<li><h4 id="break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。-break语句也在switch语句中使用"><a href="#break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。-break语句也在switch语句中使用" class="headerlink" title="break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。(break语句也在switch语句中使用)"></a>break在任何循环语句的主体部分，均可用break控制循环的流程。<u>break用于强行退出循环</u>，不执行循环中剩余的语句。(break语句也在switch语句中使用)</h4></li>
<li><h4 id="continue-语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判断。"><a href="#continue-语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判断。" class="headerlink" title="continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判断。"></a>continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判断。</h4></li>
</ul>
<h3 id="关于goto关键字"><a href="#关于goto关键字" class="headerlink" title="关于goto关键字"></a>关于goto关键字</h3><ul>
<li><pre><code>#### goto关键字很早就在程序设计语言中出现。尽管goto仍是java的一个保留字，但并未在语言中得到正式使用；Java 没有goto，然而，在break和continue这两个关键字的身上，我们仍然能看出一些goto的影子---带标签的break和continue。
</code></pre>
</li>
<li><h4 id="“标签”是指后面跟一个冒号的标识符，例如：label："><a href="#“标签”是指后面跟一个冒号的标识符，例如：label：" class="headerlink" title="“标签”是指后面跟一个冒号的标识符，例如：label："></a>“标签”是指后面跟一个冒号的标识符，例如：label：</h4></li>
<li><h4 id="对Java来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。"><a href="#对Java来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。" class="headerlink" title="对Java来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。"></a>对Java来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，他们就会中断到存在标签的地方。</h4></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印101-105之间所有的质数</span></span><br><span class="line">        <span class="comment">//质数是指在大于1的自然数中，除了1和它本身以外不在有其他的自然数。</span></span><br><span class="line">        <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        outer:<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">101</span>; i &lt; <span class="number">150</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j =<span class="number">2</span>;j&lt;i/<span class="number">2</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>类型的转换</title>
    <url>/2021/05/06/%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="类型的转换"><a href="#类型的转换" class="headerlink" title="类型的转换"></a>类型的转换</h1><h4 id="由于Java-是强类型语言，所以要进行有些运算的时候，需要用到类型转换"><a href="#由于Java-是强类型语言，所以要进行有些运算的时候，需要用到类型转换" class="headerlink" title="由于Java 是强类型语言，所以要进行有些运算的时候，需要用到类型转换"></a>由于Java 是强类型语言，所以要进行有些运算的时候，需要用到类型转换</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由低------------------------------到高</span><br><span class="line">byte → short → char → int → long → float → double</span><br></pre></td></tr></table></figure>

<h4 id="在运算中，不同类型的数据先转化为同一类型，然后进行运算。"><a href="#在运算中，不同类型的数据先转化为同一类型，然后进行运算。" class="headerlink" title="在运算中，不同类型的数据先转化为同一类型，然后进行运算。"></a>在运算中，不同类型的数据先转化为同一类型，然后进行运算。</h4><h3 id="强制类型转换和自动类型转换"><a href="#强制类型转换和自动类型转换" class="headerlink" title="强制类型转换和自动类型转换"></a>强制类型转换和自动类型转换</h3><p>注意点：</p>
<ol>
<li>不能对布尔值进行转换</li>
<li>不能把对象类型转换位不相干的类型</li>
<li>在把高容量转换到低容量的时候，强制转换</li>
<li>在转换的时候可能存在内存溢出，或者精度问题！</li>
</ol>
<h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><p>(类型)变量名     高到低</p>
<h4 id="自动转换"><a href="#自动转换" class="headerlink" title="自动转换"></a>自动转换</h4><p>由低—–高</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>方法的重载</title>
    <url>/2021/05/15/%E6%96%B9%E6%B3%95%E7%9A%84%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><h4 id="方法的重载就是在一个类里面，有相同的方法名称-函数名称-，但形参不同的函数。"><a href="#方法的重载就是在一个类里面，有相同的方法名称-函数名称-，但形参不同的函数。" class="headerlink" title="方法的重载就是在一个类里面，有相同的方法名称(函数名称)，但形参不同的函数。"></a>方法的重载就是在一个类里面，有相同的方法名称(函数名称)，但形参不同的函数。</h4><h4 id="方法的重载的规则："><a href="#方法的重载的规则：" class="headerlink" title="方法的重载的规则："></a>方法的重载的规则：</h4><ul>
<li><h5 id="方法名称必须相同。"><a href="#方法名称必须相同。" class="headerlink" title="方法名称必须相同。"></a>方法名称必须相同。</h5></li>
<li><h5 id="参数列表必须不同-个数不同，或类型不同、参数排列顺序不同等"><a href="#参数列表必须不同-个数不同，或类型不同、参数排列顺序不同等" class="headerlink" title="参数列表必须不同(个数不同，或类型不同、参数排列顺序不同等)"></a>参数列表必须不同(个数不同，或类型不同、参数排列顺序不同等)</h5></li>
<li><h5 id="方法的返回值类型可以相同也可以不相同。"><a href="#方法的返回值类型可以相同也可以不相同。" class="headerlink" title="方法的返回值类型可以相同也可以不相同。"></a>方法的返回值类型可以相同也可以不相同。</h5></li>
<li><h5 id="仅仅返回值类型不同不足以成为方法的重载。"><a href="#仅仅返回值类型不同不足以成为方法的重载。" class="headerlink" title="仅仅返回值类型不同不足以成为方法的重载。"></a>仅仅返回值类型不同不足以成为方法的重载。</h5></li>
</ul>
<h4 id="实现理论："><a href="#实现理论：" class="headerlink" title="实现理论："></a>实现理论：</h4><h5 id="方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。"><a href="#方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。" class="headerlink" title="方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。"></a>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = add(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123; <span class="keyword">return</span> a+b; &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/2021/05/06/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h4 id="JAVA-语言支持如下运算符"><a href="#JAVA-语言支持如下运算符" class="headerlink" title="JAVA 语言支持如下运算符:"></a>JAVA 语言支持如下运算符:</h4><ul>
<li>算术运算符: +, -, * ,  /, %, ++, –</li>
<li>赋值运算符 =</li>
<li>关系运算符: &gt; ,  &lt; ,  &gt;= , &lt;= , == , != instanceof</li>
<li>逻辑运算符：&amp;&amp;,||,!</li>
<li>位运算符:  &amp; , |  , ^ ，~，&gt;&gt;  ,  &lt;&lt;  ,   &gt;&gt;&gt;</li>
<li>条件运算符:    ？：</li>
<li>扩展赋值运算符:  +=  -=   *= </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二元运算符</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">25</span>;</span><br><span class="line">System.out.println(a+b);</span><br><span class="line">System.out.println(a-b);</span><br><span class="line">System.out.println(a*b);</span><br><span class="line">System.out.println(a/b);</span><br><span class="line"><span class="comment">//关系运算符返回的结果为：正确，错误  布尔值</span></span><br><span class="line"><span class="comment">//取余，模运算</span></span><br><span class="line">System.out.println(c%a); <span class="comment">// c/a   25/10  = 2 ....5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//++自增 --自减</span></span><br><span class="line"><span class="keyword">int</span> e = a++; <span class="comment">//执行完这行代码后，先给e赋值，在自增</span></span><br><span class="line"><span class="keyword">int</span> f = ++a; <span class="comment">//执行这行代码前 a先自增，然后在赋值给b</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> a =<span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b =<span class="keyword">false</span>;</span><br><span class="line">       System.out.println(<span class="string">&quot;a &amp;&amp; b:&quot;</span>+(a&amp;&amp;b));<span class="comment">//逻辑与运算：两个变量都为真，结果才为true</span></span><br><span class="line">       System.out.println(<span class="string">&quot;a || b:&quot;</span>+(a||b));<span class="comment">//逻辑与运算：两个变量有一个为真，结果才为true</span></span><br><span class="line">       System.out.println(<span class="string">&quot;！(a &amp;&amp; b):&quot;</span>+!(a&amp;&amp;b));<span class="comment">//如果是真，则变为假，如果是假则变为真</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Demo08&#123;</span><br><span class="line">public static void main (String [] args)&#123;</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F; x ? y : z</span><br><span class="line">		&#x2F;&#x2F; 如果x &#x3D;&#x3D; true ，则结果为y，否则结果为 Z</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>递归</title>
    <url>/2021/05/16/%E9%80%92%E5%BD%92%E8%AE%B2%E8%A7%A3/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序结构和IF选择结构</title>
    <url>/2021/05/10/%E9%A1%BA%E5%BA%8F%E7%BB%93%E6%9E%84%E5%92%8C%E9%80%89%E6%8B%A9%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>​        </p>
<h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><ul>
<li><h4 id="Java-的基本结构就是顺序结构，除非特别指明，否则这就按照顺序一句一句执行。"><a href="#Java-的基本结构就是顺序结构，除非特别指明，否则这就按照顺序一句一句执行。" class="headerlink" title="Java 的基本结构就是顺序结构，除非特别指明，否则这就按照顺序一句一句执行。"></a>Java 的基本结构就是顺序结构，除非特别指明，否则这就按照顺序一句一句执行。</h4></li>
<li><h4 id="顺序结构是最简单的算法结构。"><a href="#顺序结构是最简单的算法结构。" class="headerlink" title="顺序结构是最简单的算法结构。"></a>顺序结构是最简单的算法结构。</h4></li>
<li><h4 id="语句与语句之间，框与框之间是按照从上到下的顺序进行的，它是有若干个一次执行的处理步骤组成的，它是任何一个算法都离不开的一种基本算法结构。"><a href="#语句与语句之间，框与框之间是按照从上到下的顺序进行的，它是有若干个一次执行的处理步骤组成的，它是任何一个算法都离不开的一种基本算法结构。" class="headerlink" title="语句与语句之间，框与框之间是按照从上到下的顺序进行的，它是有若干个一次执行的处理步骤组成的，它是任何一个算法都离不开的一种基本算法结构。"></a>语句与语句之间，框与框之间是按照从上到下的顺序进行的，它是有若干个一次执行的处理步骤组成的，它是任何一个算法都离不开的一种基本算法结构。</h4></li>
</ul>
<h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><ul>
<li><h4 id="if单选择结构"><a href="#if单选择结构" class="headerlink" title="if单选择结构"></a>if单选择结构</h4></li>
<li><h4 id="if双选择结构"><a href="#if双选择结构" class="headerlink" title="if双选择结构"></a>if双选择结构</h4></li>
<li><h4 id="if多选择结构"><a href="#if多选择结构" class="headerlink" title="if多选择结构"></a>if多选择结构</h4></li>
<li><h4 id="嵌套的if结构"><a href="#嵌套的if结构" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h4></li>
<li><h4 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h4><h4 id="if-单选择结构"><a href="#if-单选择结构" class="headerlink" title="if 单选择结构"></a>if 单选择结构</h4><h5 id="我们很多时候要去判断一个东西是否可行，然后我们才去执行，这样的一个过程中用if语句来表示"><a href="#我们很多时候要去判断一个东西是否可行，然后我们才去执行，这样的一个过程中用if语句来表示" class="headerlink" title="我们很多时候要去判断一个东西是否可行，然后我们才去执行，这样的一个过程中用if语句来表示"></a>我们很多时候要去判断一个东西是否可行，然后我们才去执行，这样的一个过程中用if语句来表示</h5><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果布尔表达式 为ture 将执行的语句称之为循环体</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ifDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个内容&quot;</span>);</span><br><span class="line">        String s = scanner.nextLine();</span><br><span class="line">        <span class="comment">//equals ：判断字符串是否相等</span></span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">&quot;Hlleo&quot;</span>))&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;End&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="if-双选择结构"><a href="#if-双选择结构" class="headerlink" title="if 双选择结构"></a>if 双选择结构</h3><h4 id="两个判断-if-else结构"><a href="#两个判断-if-else结构" class="headerlink" title="两个判断 if - else结构"></a>两个判断 if - else结构</h4><h4 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">If(布尔表达式)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式的值为true就运行这里的代码</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式的值为false就运行这里的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成绩及格&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成绩不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="if多选择结构-1"><a href="#if多选择结构-1" class="headerlink" title="if多选择结构"></a>if多选择结构</h3><h4 id="代码判断需求多的就需要用到-if-else-if"><a href="#代码判断需求多的就需要用到-if-else-if" class="headerlink" title="代码判断需求多的就需要用到 if else if"></a>代码判断需求多的就需要用到 if else if</h4><h4 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式1的值为true执行这段代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式2的值为true执行这段代码</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式<span class="number">3</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式3的值为true执行这段代码</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//如果以上布尔表达式都不为true执行这段代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfelseifDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入成绩：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (score == <span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score &gt;=<span class="number">80</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (score&gt;<span class="number">60</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="嵌套的if结构-1"><a href="#嵌套的if结构-1" class="headerlink" title="嵌套的if结构"></a>嵌套的if结构</h3><h4 id="使用嵌套的if…else-语句是合法的，也就是说你可以在另外一个-if或者else-if-语句中使用if或者if-else-语句中使用if-或者-if-else-语句。你可以像-if-语句一样嵌套-else-if-…-else。"><a href="#使用嵌套的if…else-语句是合法的，也就是说你可以在另外一个-if或者else-if-语句中使用if或者if-else-语句中使用if-或者-if-else-语句。你可以像-if-语句一样嵌套-else-if-…-else。" class="headerlink" title="使用嵌套的if…else 语句是合法的，也就是说你可以在另外一个 if或者else if 语句中使用if或者if else 语句中使用if 或者 if else 语句。你可以像 if 语句一样嵌套 else if ….else。"></a>使用嵌套的if…else 语句是合法的，也就是说你可以在另外一个 if或者else if 语句中使用if或者if else 语句中使用if 或者 if else 语句。你可以像 if 语句一样嵌套 else if ….else。</h4><h4 id="语法：-2"><a href="#语法：-2" class="headerlink" title="语法："></a>语法：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式1的值为true 执行代码</span></span><br><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line"><span class="comment">//如果布尔表达式2的值为true 执行代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch-多选择结构"><a href="#switch-多选择结构" class="headerlink" title="switch 多选择结构"></a>switch 多选择结构</h3><h4 id="多选择结构还有一个实现方式就是switch-case-语句"><a href="#多选择结构还有一个实现方式就是switch-case-语句" class="headerlink" title="多选择结构还有一个实现方式就是switch case 语句"></a>多选择结构还有一个实现方式就是switch case 语句</h4><h4 id="switch-case-语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。"><a href="#switch-case-语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。" class="headerlink" title="switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。"></a>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</h4><h5 id="switch-语句中的变量类型可以是："><a href="#switch-语句中的变量类型可以是：" class="headerlink" title="switch 语句中的变量类型可以是："></a>switch 语句中的变量类型可以是：</h5><h5 id="byte、short、int、或者char、也支持String-同时case-标签必须为字符串常量或者字面量"><a href="#byte、short、int、或者char、也支持String-同时case-标签必须为字符串常量或者字面量" class="headerlink" title="byte、short、int、或者char、也支持String 同时case 标签必须为字符串常量或者字面量"></a>byte、short、int、或者char、也支持String 同时case 标签必须为字符串常量或者字面量</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line"><span class="keyword">case</span> value :</span><br><span class="line">	<span class="comment">// 语句</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> value2 : </span><br><span class="line">	<span class="comment">//语句</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">	<span class="comment">//你可以有任何数量的case语句</span></span><br><span class="line">	<span class="keyword">default</span>: <span class="comment">//可选</span></span><br><span class="line">	<span class="comment">//语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// case 穿透</span></span><br><span class="line">        <span class="comment">// switch 匹配一个具体值</span></span><br><span class="line">        <span class="keyword">char</span> grade =<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀1&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀2&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀3&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////String 类型</span></span><br><span class="line"><span class="comment">//字符的本质还是数字</span></span><br><span class="line"><span class="comment">//反编译  java ---- class(字节码文件) ---反编译(idea)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           String name =<span class="string">&quot;Java&quot;</span>;</span><br><span class="line">        <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Java&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;JAVA&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;HTML&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;mysql&quot;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;未知&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
